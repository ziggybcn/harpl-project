Import Harpl

Class SUB extends HarplFunction 

	Method Run:Void(vm:Hvm,bco:ByteCodeObj)
	
	Print "substraction!!!"
		
	Local Bool1:Bool, Int1:Int, Float1:Float, String1:String, opKind1:Int
	Local Bool2:Bool, Int2:Int, Float2:Float, String2:String, opKind2:Int

	'GET FIRST OPERATOR
	'LoadTemplate ./Templates/loadoperator.Monkey, boolean=Bool1, integer=Int1, string=String1, float=Float1, virtualmachine=vm, bytecodeobj=bco, opkind=opKind1
	'#Region Code generated by the Harpl-Monkey template. Loaded from: ./Templates/loadoperator.Monkey
	bco.pos+=1; 
	If true	'Scope generated to avoid LOCALs clash.
		Local varKind:Int = bco.code[bco.pos]
		Select varKind
			Case expKinds.BC_ARRAYVAR
				Error("Arrays are not implemented")
			Case expKinds.BC_BOOLVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Bool1, datasource=Booleans, opkind = opKind1, opvalue = expKinds.BC_BOOLVAR 
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Bool1 = localScope.Booleans[varNum]
				opKind1 = expKinds.BC_BOOLVAR
				'endtemplate
			Case expKinds.BC_ERRORUNKNOWNVAR 
				Error("Unknown var accessed binary operator!")
			Case expKinds.BC_FLOATPREFIX 
				bco.pos+=1; Float1 = bco.floats[bco.code[bco.pos]];
				opKind1 = expKinds.BC_FLOATVAR 
			Case expKinds.BC_FLOATVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Bool1, datasource=Booleans, opkind = opKind1, opvalue = expKinds.BC_FLOATVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Bool1 = localScope.Booleans[varNum]
				opKind1 = expKinds.BC_FLOATVAR
				'endtemplate
			Case expKinds.BC_INTPREFIX
				bco.pos+=1; Int1 = bco.code[bco.pos];		
			Case expKinds.BC_INTVAR 
				Local Result:Int 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Bool1, datasource=Booleans, opkind = opKind1, opvalue = expKinds.BC_INTVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Bool1 = localScope.Booleans[varNum]
				opKind1 = expKinds.BC_INTVAR
				'endtemplate
			Case expKinds.BC_OBJVAR 
				Error("Object address can't be used as part of an arithmetic expression.")
			Case expKinds.BC_STRINGLITERAL 
				bco.pos+=1; String1 = bco.literals[bco.code[bco.pos]];
			Case expKinds.BC_STRINGVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Bool1, datasource=Booleans, opkind = opKind1, opvalue = expKinds.BC_STRINGVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Bool1 = localScope.Booleans[varNum]
				opKind1 = expKinds.BC_STRINGVAR
	 			'endtemplate 
			Case expKinds.BC_TMPBOOL
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Bool1, source=tmpBool, opkind = opKind1, opvalue = expKinds.BC_BOOLVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Bool1 = vm.tmpBool[varNum]
				opKind1 = expKinds.BC_BOOLVAR
				'endtemplate
			Case expKinds.BC_TMPFLOAT 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Float1, source=tmpFloat, opkind = opKind1, opvalue = expKinds.BC_FLOATVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Float1 = vm.tmpFloat[varNum]
				opKind1 = expKinds.BC_FLOATVAR
				'endtemplate
			Case expKinds.BC_TMPINTEGER 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Int1, source=tmpInt, opkind = opKind1, opvalue = expKinds.BC_INTVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Int1 = vm.tmpInt[varNum]
				opKind1 = expKinds.BC_INTVAR
				'endtemplate
			Case expKinds.BC_TMPSTRING 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = String1, source=tmpStrings, opkind = opKind1, opvalue = expKinds.BC_STRINGVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				String1 = vm.tmpStrings[varNum]
				opKind1 = expKinds.BC_STRINGVAR
				'endtemplate
			Default 
				Error("Unknown operator!!")
		End
	EndIf
	'#End Region
	'endtemplate	

	'GET SECOND OPERATOR:
	'LoadTemplate ./Templates/loadoperator.Monkey, boolean=Bool2, integer=Int2, string=String2, float=Float2, virtualmachine=vm, bytecodeobj=bco, opkind=opKind2
	'#Region Code generated by the Harpl-Monkey template. Loaded from: ./Templates/loadoperator.Monkey
	bco.pos+=1; 
	If true	'Scope generated to avoid LOCALs clash.
		Local varKind:Int = bco.code[bco.pos]
		Select varKind
			Case expKinds.BC_ARRAYVAR
				Error("Arrays are not implemented")
			Case expKinds.BC_BOOLVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Bool2, datasource=Booleans, opkind = opKind2, opvalue = expKinds.BC_BOOLVAR 
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Bool2 = localScope.Booleans[varNum]
				opKind2 = expKinds.BC_BOOLVAR
				'endtemplate
			Case expKinds.BC_ERRORUNKNOWNVAR 
				Error("Unknown var accessed binary operator!")
			Case expKinds.BC_FLOATPREFIX 
				bco.pos+=1; Float2 = bco.floats[bco.code[bco.pos]];
				opKind2 = expKinds.BC_FLOATVAR 
			Case expKinds.BC_FLOATVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Bool2, datasource=Booleans, opkind = opKind2, opvalue = expKinds.BC_FLOATVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Bool2 = localScope.Booleans[varNum]
				opKind2 = expKinds.BC_FLOATVAR
				'endtemplate
			Case expKinds.BC_INTPREFIX
				bco.pos+=1; Int2 = bco.code[bco.pos];		
			Case expKinds.BC_INTVAR 
				Local Result:Int 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Bool2, datasource=Booleans, opkind = opKind2, opvalue = expKinds.BC_INTVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Bool2 = localScope.Booleans[varNum]
				opKind2 = expKinds.BC_INTVAR
				'endtemplate
			Case expKinds.BC_OBJVAR 
				Error("Object address can't be used as part of an arithmetic expression.")
			Case expKinds.BC_STRINGLITERAL 
				bco.pos+=1; String2 = bco.literals[bco.code[bco.pos]];
			Case expKinds.BC_STRINGVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Bool2, datasource=Booleans, opkind = opKind2, opvalue = expKinds.BC_STRINGVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Bool2 = localScope.Booleans[varNum]
				opKind2 = expKinds.BC_STRINGVAR
	 			'endtemplate 
			Case expKinds.BC_TMPBOOL
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Bool2, source=tmpBool, opkind = opKind2, opvalue = expKinds.BC_BOOLVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Bool2 = vm.tmpBool[varNum]
				opKind2 = expKinds.BC_BOOLVAR
				'endtemplate
			Case expKinds.BC_TMPFLOAT 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Float2, source=tmpFloat, opkind = opKind2, opvalue = expKinds.BC_FLOATVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Float2 = vm.tmpFloat[varNum]
				opKind2 = expKinds.BC_FLOATVAR
				'endtemplate
			Case expKinds.BC_TMPINTEGER 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Int2, source=tmpInt, opkind = opKind2, opvalue = expKinds.BC_INTVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Int2 = vm.tmpInt[varNum]
				opKind2 = expKinds.BC_INTVAR
				'endtemplate
			Case expKinds.BC_TMPSTRING 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = String2, source=tmpStrings, opkind = opKind2, opvalue = expKinds.BC_STRINGVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				String2 = vm.tmpStrings[varNum]
				opKind2 = expKinds.BC_STRINGVAR
				'endtemplate
			Default 
				Error("Unknown operator!!")
		End
	EndIf
	'#End Region
	'endtemplate	
	
	'PERFORM OPERATION:
	
	'SET RESULT TO TARGET:
	
	End

End

 