Import Harpl

Class Unary_Sub extends HarplFunction 
	'loadtemplate ./Templates/unaryop.Monkey,operation=-
	'#Region Code generated by the Harpl-Monkey template. Loaded from: ./Templates/unaryop.Monkey
	Method Run:Void(vm:Hvm,bco:ByteCodeObj)
	
	Local Bool1:Bool, Int1:Int, Float1:Float, String1:String, opKind1:Int
	'Local Bool2:Bool, Int2:Int, Float2:Float, String2:String, opKind2:Int
	
	'GET FIRST OPERATOR
	'LoadTemplate ./loadoperator.Monkey, boolean=Bool1, integer=Int1, string=String1, float=Float1, virtualmachine=vm, bytecodeobj=bco, opkind=opKind1
	If true	'Scope generated to avoid LOCALs clash.
		bco.pos+=1; 
		Local varKind:Int = bco.code[bco.pos]
		Select varKind
			Case expKinds.BC_ARRAYVAR
				Error("Arrays are not implemented")
			Case expKinds.BC_BOOLVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Bool1, datasource=Booleans, opkind = opKind1, opvalue = expKinds.BC_BOOLVAR 
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Bool1 = localScope.Booleans[varNum]
				opKind1 = expKinds.BC_BOOLVAR
				'endtemplate
			Case expKinds.BC_ERRORUNKNOWNVAR 
				Error("Unknown var accessed binary operator!")
			Case expKinds.BC_FLOATPREFIX 
				bco.pos+=1; Float1 = bco.floats[bco.code[bco.pos]];
				opKind1 = expKinds.BC_FLOATVAR 
			Case expKinds.BC_FLOATVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Float1, datasource=Floats, opkind = opKind1, opvalue = expKinds.BC_FLOATVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Float1 = localScope.Floats[varNum]
				opKind1 = expKinds.BC_FLOATVAR
				'endtemplate
			Case expKinds.BC_INTPREFIX
				bco.pos+=1; Int1 = bco.code[bco.pos];
				opKind1 = expKinds.BC_INTVAR
		
			Case expKinds.BC_INTVAR 
				Local Result:Int 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Int1, datasource=Ints, opkind = opKind1, opvalue = expKinds.BC_INTVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Int1 = localScope.Ints[varNum]
				opKind1 = expKinds.BC_INTVAR
				'endtemplate
			Case expKinds.BC_OBJVAR 
				Error("Object address can't be used as part of an arithmetic expression.")
			Case expKinds.BC_STRINGLITERAL 
				bco.pos+=1; String1 = bco.literals[bco.code[bco.pos]];
				opKind1 = expKinds.BC_STRINGVAR
				
			Case expKinds.BC_STRINGVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=String1, datasource=Strings, opkind = opKind1, opvalue = expKinds.BC_STRINGVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				String1 = localScope.Strings[varNum]
				opKind1 = expKinds.BC_STRINGVAR
	 			'endtemplate 
			Case expKinds.BC_TMPBOOL
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Bool1, source=tmpBool, opkind = opKind1, opvalue = expKinds.BC_BOOLVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Bool1 = vm.tmpBool[varNum]
				opKind1 = expKinds.BC_BOOLVAR
				'endtemplate
			Case expKinds.BC_TMPFLOAT 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Float1, source=tmpFloat, opkind = opKind1, opvalue = expKinds.BC_FLOATVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Float1 = vm.tmpFloat[varNum]
				opKind1 = expKinds.BC_FLOATVAR
				'endtemplate
			Case expKinds.BC_TMPINTEGER 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Int1, source=tmpInt, opkind = opKind1, opvalue = expKinds.BC_INTVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Int1 = vm.tmpInt[varNum]
				opKind1 = expKinds.BC_INTVAR
				'endtemplate
			Case expKinds.BC_TMPSTRING 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = String1, source=tmpStrings, opkind = opKind1, opvalue = expKinds.BC_STRINGVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				String1 = vm.tmpStrings[varNum]
				opKind1 = expKinds.BC_STRINGVAR
				'endtemplate
			Default 
				Error("Unknown operator!!")
		End
	EndIf
	'endtemplate	
	
	'PERFORM OPERATION:
	if opKind1 = expKinds.BC_FLOATVAR 
			'loadtemplate ./unaryperformoperation.Monkey, operation=-, resultkind = Float, operator1=Float1, bytecodeobj=bco, virtualmachine=vm
			local result:Float = - Float1
			bco.pos+=1; Local varKind:Int = bco.code[bco.pos]
			Select varKind
				Case expKinds.BC_ARRAYVAR 
					Error("Can't convert from Array to Float")
				Case expKinds.BC_BOOLVAR 
					Error("Can't convert from Bool to Float")
				Case expKinds.BC_FLOATVAR 
					'LoadTemplate ./settovar.monkey, bytecode=bco, virtualmachine=vm, result= result, datasource=Floats
					bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
					Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
					localScope.Floats[varNum] = result
					'endtemplate
				Case expKinds.BC_INTVAR 
					'LoadTemplate ./settovar.monkey, bytecode=bco, virtualmachine=vm, result= result, datasource=Ints
					bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
					Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
					localScope.Ints[varNum] = result
					'endtemplate
				Case expKinds.BC_OBJVAR 
					Error("Can't set from Object to Float")
				Case expKinds.BC_STRINGVAR 
					Error("Can't set from String to Float")
				Case expKinds.BC_TMPBOOL
					Error("Can't convert from Bool to Float")
				Case expKinds.BC_TMPFLOAT 
					 'LoadTemplate ./settotmp.monkey, bytecode=bco, virtualmachine=vm, result= result, source=tmpFloat
					 bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					 vm.tmpFloat[varNum] = result 
					 'endtemplate
				Case expKinds.BC_TMPINTEGER 
					 'LoadTemplate ./settotmp.monkey, bytecode=bco, virtualmachine=vm, result= result, source=tmpInt
					 bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					 vm.tmpInt[varNum] = result 
					 'endtemplate
				Case expKinds.BC_TMPSTRING 
					Error("Can't set from String to Float")
			End select
			'endtemplate
	ElseIf opKind1 = expKinds.BC_INTVAR
			'loadtemplate ./unaryperformoperation.Monkey, operation=-, resultkind = Int, operator1=Int1, bytecodeobj=bco, virtualmachine=vm
			local result:Int = - Int1
			bco.pos+=1; Local varKind:Int = bco.code[bco.pos]
			Select varKind
				Case expKinds.BC_ARRAYVAR 
					Error("Can't convert from Array to Int")
				Case expKinds.BC_BOOLVAR 
					Error("Can't convert from Bool to Int")
				Case expKinds.BC_FLOATVAR 
					'LoadTemplate ./settovar.monkey, bytecode=bco, virtualmachine=vm, result= result, datasource=Floats
					bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
					Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
					localScope.Floats[varNum] = result
					'endtemplate
				Case expKinds.BC_INTVAR 
					'LoadTemplate ./settovar.monkey, bytecode=bco, virtualmachine=vm, result= result, datasource=Ints
					bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
					Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
					localScope.Ints[varNum] = result
					'endtemplate
				Case expKinds.BC_OBJVAR 
					Error("Can't set from Object to Int")
				Case expKinds.BC_STRINGVAR 
					Error("Can't set from String to Int")
				Case expKinds.BC_TMPBOOL
					Error("Can't convert from Bool to Int")
				Case expKinds.BC_TMPFLOAT 
					 'LoadTemplate ./settotmp.monkey, bytecode=bco, virtualmachine=vm, result= result, source=tmpFloat
					 bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					 vm.tmpFloat[varNum] = result 
					 'endtemplate
				Case expKinds.BC_TMPINTEGER 
					 'LoadTemplate ./settotmp.monkey, bytecode=bco, virtualmachine=vm, result= result, source=tmpInt
					 bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					 vm.tmpInt[varNum] = result 
					 'endtemplate
				Case expKinds.BC_TMPSTRING 
					Error("Can't set from String to Int")
			End select
			'endtemplate
	Else
		Error("Invalid data type for arithmetic operation.")
	EndIf
	bco.pos+=1
	End
	'#End Region
	'endtemplate
End

Class Unary_Complement extends HarplFunction 
	'loadtemplate ./Templates/unaryop.Monkey,operation=~
	'#Region Code generated by the Harpl-Monkey template. Loaded from: ./Templates/unaryop.Monkey
	Method Run:Void(vm:Hvm,bco:ByteCodeObj)
	
	Local Bool1:Bool, Int1:Int, Float1:Float, String1:String, opKind1:Int
	'Local Bool2:Bool, Int2:Int, Float2:Float, String2:String, opKind2:Int
	
	'GET FIRST OPERATOR
	'LoadTemplate ./loadoperator.Monkey, boolean=Bool1, integer=Int1, string=String1, float=Float1, virtualmachine=vm, bytecodeobj=bco, opkind=opKind1
	If true	'Scope generated to avoid LOCALs clash.
		bco.pos+=1; 
		Local varKind:Int = bco.code[bco.pos]
		Select varKind
			Case expKinds.BC_ARRAYVAR
				Error("Arrays are not implemented")
			Case expKinds.BC_BOOLVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Bool1, datasource=Booleans, opkind = opKind1, opvalue = expKinds.BC_BOOLVAR 
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Bool1 = localScope.Booleans[varNum]
				opKind1 = expKinds.BC_BOOLVAR
				'endtemplate
			Case expKinds.BC_ERRORUNKNOWNVAR 
				Error("Unknown var accessed binary operator!")
			Case expKinds.BC_FLOATPREFIX 
				bco.pos+=1; Float1 = bco.floats[bco.code[bco.pos]];
				opKind1 = expKinds.BC_FLOATVAR 
			Case expKinds.BC_FLOATVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Float1, datasource=Floats, opkind = opKind1, opvalue = expKinds.BC_FLOATVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Float1 = localScope.Floats[varNum]
				opKind1 = expKinds.BC_FLOATVAR
				'endtemplate
			Case expKinds.BC_INTPREFIX
				bco.pos+=1; Int1 = bco.code[bco.pos];
				opKind1 = expKinds.BC_INTVAR
		
			Case expKinds.BC_INTVAR 
				Local Result:Int 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=Int1, datasource=Ints, opkind = opKind1, opvalue = expKinds.BC_INTVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				Int1 = localScope.Ints[varNum]
				opKind1 = expKinds.BC_INTVAR
				'endtemplate
			Case expKinds.BC_OBJVAR 
				Error("Object address can't be used as part of an arithmetic expression.")
			Case expKinds.BC_STRINGLITERAL 
				bco.pos+=1; String1 = bco.literals[bco.code[bco.pos]];
				opKind1 = expKinds.BC_STRINGVAR
				
			Case expKinds.BC_STRINGVAR 
				'LOADTEMPLATE ./accessvar.Monkey,bytecode=bco, virtualmachine = vm, result=String1, datasource=Strings, opkind = opKind1, opvalue = expKinds.BC_STRINGVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
				Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
				String1 = localScope.Strings[varNum]
				opKind1 = expKinds.BC_STRINGVAR
	 			'endtemplate 
			Case expKinds.BC_TMPBOOL
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Bool1, source=tmpBool, opkind = opKind1, opvalue = expKinds.BC_BOOLVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Bool1 = vm.tmpBool[varNum]
				opKind1 = expKinds.BC_BOOLVAR
				'endtemplate
			Case expKinds.BC_TMPFLOAT 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Float1, source=tmpFloat, opkind = opKind1, opvalue = expKinds.BC_FLOATVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Float1 = vm.tmpFloat[varNum]
				opKind1 = expKinds.BC_FLOATVAR
				'endtemplate
			Case expKinds.BC_TMPINTEGER 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = Int1, source=tmpInt, opkind = opKind1, opvalue = expKinds.BC_INTVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
				Int1 = vm.tmpInt[varNum]
				opKind1 = expKinds.BC_INTVAR
				'endtemplate
			Case expKinds.BC_TMPSTRING 
				'LoadTemplate ./accestmp.Monkey, bytecode=bco, virtualmachine = vm, result = String1, source=tmpStrings, opkind = opKind1, opvalue = expKinds.BC_STRINGVAR
				bco.pos+=1; Local varNum:Int = bco.code[bco.pos]		
				String1 = vm.tmpStrings[varNum]
				opKind1 = expKinds.BC_STRINGVAR
				'endtemplate
			Default 
				Error("Unknown operator!!")
		End
	EndIf
	'endtemplate	
	
	'PERFORM OPERATION:
	if opKind1 = expKinds.BC_FLOATVAR 
			'loadtemplate ./unaryperformoperation.Monkey, operation=~, resultkind = Float, operator1=Float1, bytecodeobj=bco, virtualmachine=vm
			local result:Float = ~ Float1
			bco.pos+=1; Local varKind:Int = bco.code[bco.pos]
			Select varKind
				Case expKinds.BC_ARRAYVAR 
					Error("Can't convert from Array to Float")
				Case expKinds.BC_BOOLVAR 
					Error("Can't convert from Bool to Float")
				Case expKinds.BC_FLOATVAR 
					'LoadTemplate ./settovar.monkey, bytecode=bco, virtualmachine=vm, result= result, datasource=Floats
					bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
					Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
					localScope.Floats[varNum] = result
					'endtemplate
				Case expKinds.BC_INTVAR 
					'LoadTemplate ./settovar.monkey, bytecode=bco, virtualmachine=vm, result= result, datasource=Ints
					bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
					Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
					localScope.Ints[varNum] = result
					'endtemplate
				Case expKinds.BC_OBJVAR 
					Error("Can't set from Object to Float")
				Case expKinds.BC_STRINGVAR 
					Error("Can't set from String to Float")
				Case expKinds.BC_TMPBOOL
					Error("Can't convert from Bool to Float")
				Case expKinds.BC_TMPFLOAT 
					 'LoadTemplate ./settotmp.monkey, bytecode=bco, virtualmachine=vm, result= result, source=tmpFloat
					 bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					 vm.tmpFloat[varNum] = result 
					 'endtemplate
				Case expKinds.BC_TMPINTEGER 
					 'LoadTemplate ./settotmp.monkey, bytecode=bco, virtualmachine=vm, result= result, source=tmpInt
					 bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					 vm.tmpInt[varNum] = result 
					 'endtemplate
				Case expKinds.BC_TMPSTRING 
					Error("Can't set from String to Float")
			End select
			'endtemplate
	ElseIf opKind1 = expKinds.BC_INTVAR
			'loadtemplate ./unaryperformoperation.Monkey, operation=~, resultkind = Int, operator1=Int1, bytecodeobj=bco, virtualmachine=vm
			local result:Int = ~ Int1
			bco.pos+=1; Local varKind:Int = bco.code[bco.pos]
			Select varKind
				Case expKinds.BC_ARRAYVAR 
					Error("Can't convert from Array to Int")
				Case expKinds.BC_BOOLVAR 
					Error("Can't convert from Bool to Int")
				Case expKinds.BC_FLOATVAR 
					'LoadTemplate ./settovar.monkey, bytecode=bco, virtualmachine=vm, result= result, datasource=Floats
					bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
					Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
					localScope.Floats[varNum] = result
					'endtemplate
				Case expKinds.BC_INTVAR 
					'LoadTemplate ./settovar.monkey, bytecode=bco, virtualmachine=vm, result= result, datasource=Ints
					bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					bco.pos+=1; Local scopeNum:Int = bco.code[bco.pos]
					Local localScope:DynamicDataScope = vm.dataScope.GetdynamicScope(scopeNum)
					localScope.Ints[varNum] = result
					'endtemplate
				Case expKinds.BC_OBJVAR 
					Error("Can't set from Object to Int")
				Case expKinds.BC_STRINGVAR 
					Error("Can't set from String to Int")
				Case expKinds.BC_TMPBOOL
					Error("Can't convert from Bool to Int")
				Case expKinds.BC_TMPFLOAT 
					 'LoadTemplate ./settotmp.monkey, bytecode=bco, virtualmachine=vm, result= result, source=tmpFloat
					 bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					 vm.tmpFloat[varNum] = result 
					 'endtemplate
				Case expKinds.BC_TMPINTEGER 
					 'LoadTemplate ./settotmp.monkey, bytecode=bco, virtualmachine=vm, result= result, source=tmpInt
					 bco.pos+=1; Local varNum:Int = bco.code[bco.pos]
					 vm.tmpInt[varNum] = result 
					 'endtemplate
				Case expKinds.BC_TMPSTRING 
					Error("Can't set from String to Int")
			End select
			'endtemplate
	Else
		Error("Invalid data type for arithmetic operation.")
	EndIf
	bco.pos+=1
	
	End
	'#End Region
	'endtemplate
End

Class Unary_AsBoolean extends HarplFunction 
	
End

